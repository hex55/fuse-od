From 89cb5986b993c1d46aa917ef765c44dd4c1730d7 Mon Sep 17 00:00:00 2001
From: Pedro Luis Rodríguez González <pl.rguez@gmail.com>
Date: 15 ago. 2020 3:05:22

Patch #004 for RG350/GCW ZERO and RetroFW 1 & 2
Refactor SDL Combo keys. Now we have registered a filter for SDL events.

diff --git a/Platform/readme.txt b/Platform/readme.txt
index 177133d..3e62eac 100644
--- a/Platform/readme.txt
+++ b/Platform/readme.txt
@@ -10,7 +10,7 @@
 ------------------------
 You can open the menu with the `Power` or `Select` button.
 
-The `Select` button can be mapped to joystick or keyboard. In that case you can use the `Power` button for accessing the menu.
+If `Select` button is mapped to joystick or keyboard then you must use the `Power` button for accessing the menu.
 
 ---------------------
 ### Save settings ###
@@ -81,28 +81,28 @@
     Open the virtual keyboard
 
     `L1`
-    Open File selector dialog
+    If not mapped in Joystick options start a hotkey combo
 
     `R1`
-    Open General options dialog
+    If not mapped in Joystick options start a hotkey combo
 
     `Left Stick`
-    Nothing or As `Cursor` if used the `Power`+`B` hotkey on RG350
+    Nothing or As `Cursor` if used the `Power`+`B` hotkey on some OpenDingux handhelds (RG350)
 
     `Right Stick`
-    On RG350 models you can activate Mouse with `Power`+`B` hotkey and use to emulate Kempston mouse
+    On some OpenDingux models (RG350) you can activate Mouse with `Power`+`B` hotkey and use to emulate Kempston mouse
 
     `L2`
-    Left click with mouse emulation
+    Left click in mouse emulation
 
     `R2`
-    Right click with mouse emulation
+    Right click in mouse emulation
 
 
 Buttons in Menu and Forms:
 --------------------------
     `Cursor`, `Left Stick`
-    Move. There is no need of use `Power`+`B` hotkey on RG350 for use the left stick on menus
+    Move
 
     `A`, `Start`
     Select the option or accept the options at form
@@ -180,7 +180,7 @@
 ------------------------------------------------
 ### Mapping buttons to Joysticks or Keyboard ###
 ------------------------------------------------
-You can map Joysticks or Spectrum keys to buttons in `Menu -> Options -> Joysticks`
+You can map handheld buttons to Joysticks or Spectrum keys in `Menu -> Options -> Joysticks`
 
 Yo can do it with the next options:
 
@@ -220,6 +220,37 @@
 
 When both mappings are activated at the same time, only "GCW0 Joystick 1" will work.
 
+-------------------------
+### External joystick ###
+-------------------------
+On some handhelds is possible to connect an external Joystick using USB OTG. Then mapping of Joystick 2 is applied if it is assigned to some type of Joystick. On my RG350 I've tested with an 8Bitdo FC30 Pro controller.
+
+I don't have tested a Keyboard on USB OTG (I don't have one near), but it should work. But take into account that some keys will not work or work different to desktop version becouse the buttons on hanheld correspond to keyboard keys, and the implementation has been adapted with handheld on mind.
+
+For controllers the number of each button in mapping depends on the controller layout.
+For example on my 8Bitdo FC30 these are the mapping layout: A=1, B=2, X=4, Y=5, L1=7, R1=8, L2=9, R2=10, Select=11, Start=12, L3=14, R3=15.
+From SDL Game controller DB (https://github.com/gabomdq/SDL_GameControllerDB/blob/master/gamecontrollerdb.txt)
+	"03000000c82d00001038000000000000,8BitDo FC30 Pro,
+	a:b0,
+	b:b1,
+	back:b10,
+	dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,
+	leftshoulder:b6,
+	leftstick:b13,
+	lefttrigger:b8,
+	leftx:a0,lefty:a1,
+	rightshoulder:b7,
+	rightstick:b14,
+	righttrigger:b9,
+	rightx:a3,
+	righty:a4,
+	start:b11,
+	x:b3,
+	y:b4,
+	hint:SDL_GAMECONTROLLER_USE_BUTTON_LABELS:=1,"
+
+=>Take into account that Fuse count buttons from 1 not from 0, so add 1 to translate your layout into Fuse's config.
+
 ----------------------
 ### Kempston mouse ###
 ----------------------
@@ -239,7 +270,24 @@
 
 Disabling triple buffer sometimes causes the screen to freeze or go black, but the emulator is still running ... probably motivated by some mistake I have made in the code.
 
-You can activate/deactivate it at General options or with the button combo: L1 + R1 + X
+You can activate/deactivate it at General options or with the hotkey combo: L1 + R1.
+
+---------------------
+### Hotkey combos ###
+---------------------
+If `L1` or `R1` are not mapped to Joystick or Keyboard at press them it's activated hotkeys combos:
+
+The implemented ones correspond to Fx key functions in Fuse's SDL implementation:
+
+   L1 + R1          Toggle triple buffer
+   L1 + X           Open file (F3)
+   L1 + Y           Save file (F2)
+   R1 + X           Exit fuse (F10)
+   R1 + Y           Reset machine (F5)
+   L1 + Select + X  General options (F4)
+   L1 + Select + Y  Machine select (F9)
+   L1 + Start + X   Tape open (F7)
+   L1 + Start + Y   Tape play (F8)
 
 ---------------------
 ### Media options ###
@@ -257,20 +305,23 @@
 You can assign aditional roms from the emulator:
 
 - Open menu with `Select` or `Power` button. Then navigate from Menu --> Options --> Select Roms --> Machine ROMs or Peripheral ROMs
-- With the virtual keyboard select the key corresponding to the ROM to change. This open a file selector.
-- At file selector use the `cursor` keys to navigate to folder with your roms, select the needed rom and press the `A` Button to confirm selection.
-- Repeat until all the needed ROMs are selected. Then accept the selections choosing the **Enter
+- With `cursor` select the rom to change and press `X` button
+- At file selector use the `cursor` keys to navigate to folder where your roms are located and to select the needed rom. And press the `A` button to confirm selection.
+- Repeat until all the needed ROMs are assigned.
+- Finally do accept all pressing the `A` button.
 
-Also you can put them at next directories:
+The emulator detect your rom as custom if they not have the name expected, including path. This affect to auto-load, cutoms roms don't autoload. For this reason I have introduced the option "Auto-load media with custom rom".
 
-    For RG350 /media/data/local/home/.fuse/roms
-    For RetroFW /home/retrofw/.fuse/roms
+Also you can put the roms at routes:
 
-The emulator will not create the directories so you must create them manually.
+    For RG350   "/usr/local/home/.fuse/roms"
+    For RetroFW "/home/retrofw/.fuse/roms"
 
-Also the ipk version will be installed at folder /home/retrofw/emus/fuse. You can put aditional roms at /home/retrofw/emus/fuse/romsfolder.
+=>The emulator will not create this directories so you must create them manually.
 
-Included with fuse:
+The ipk version will be installed at folder "/home/retrofw/emus/fuse" so ou can put aditional roms at "/home/retrofw/emus/fuse/roms" folder.
+
+ROMs included with fuse:
 
     48k
     128k
@@ -283,7 +334,7 @@
     DISCiPLE and +D
     SpeccyBoot
 
-Non included:
+ROMs non included:
 
     Pentagon 128k, 512k and 1024k
     Scorpion ZS 256
diff --git a/ui/Makefile.am b/ui/Makefile.am
index ec63099..195109c 100644
--- a/ui/Makefile.am
+++ b/ui/Makefile.am
@@ -24,7 +24,9 @@
                   ui/ui.h \
                   ui/uidisplay.h \
                   ui/uijoystick.h \
-                  ui/uimedia.h
+                  ui/uimedia.h \
+                  ui/vkeyboard.h \
+                  ui/hotkeys.h
 
 EXTRA_DIST += \
               ui/options.dat \
diff --git a/ui/hotkeys.h b/ui/hotkeys.h
new file mode 100644
index 0000000..9a01076
--- /dev/null
+++ b/ui/hotkeys.h
@@ -0,0 +1,31 @@
+/* hotkeys.h: Hotkeys processing
+   Copyright (c) 2020 Pedro Luis Rodríguez González
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+   Author contact information:
+
+   E-mail: pl.rguez@gmail.com
+
+*/
+
+#ifndef HOTKEYS_H
+#define HOTKEYS_H
+
+#ifdef GCWZERO
+int filter_combo_events( const SDL_Event *event );
+#endif /* GCWZERO */
+
+#endif /* HOTKEYS_H */
diff --git a/ui/sdl/Makefile.am b/ui/sdl/Makefile.am
index dc6622d..01b7a1c 100644
--- a/ui/sdl/Makefile.am
+++ b/ui/sdl/Makefile.am
@@ -39,6 +39,7 @@
                ui/sdl/sdlkeyboard.c \
                ui/sdl/sdlkeyboard.h \
                ui/sdl/sdlui.c \
+               ui/sdl/sdlhotkeys.c \
                ui/sdl/keysyms.c
 
 ui_sdl_built = ui/sdl/keysyms.c
diff --git a/ui/sdl/sdlhotkeys.c b/ui/sdl/sdlhotkeys.c
new file mode 100644
index 0000000..5ab578d
--- /dev/null
+++ b/ui/sdl/sdlhotkeys.c
@@ -0,0 +1,315 @@
+/* sdlhotkeys.c: Hotkeys processing
+   Copyright (c) 2020 Pedro Luis Rodríguez González
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+   Author contact information:
+
+   E-mail: pl.rguez@gmail.com
+
+*/
+
+#include <config.h>
+
+#include <SDL.h>
+#include "settings.h"
+#include "ui/ui.h"
+#if VKEYBOARD
+#include "ui/vkeyboard.h"
+#endif
+#include "ui/hotkeys.h"
+
+#ifdef GCWZERO
+static int combo_done;
+static SDL_Event *combo_keys[10];
+static int last_combo_key = 0;
+static int push_combo_event( Uint8* flags );
+static int filter_combo_done( const SDL_Event *event );
+static int is_combo_possible( const SDL_Event *event );
+
+int is_combo_possible( const SDL_Event *event )
+{
+  /* There are not combos in widgets or keyboard */
+#ifdef VKEYBOARD
+  if ( ui_widget_level >= 0 || vkeyboard_enabled ) return 0;
+#else
+  if ( ui_widget_level >= 0 ) return 0;
+#endif
+
+ /* Mot filter if R1 and R1 are mapped to joysticks */
+  if ( ( event->key.keysym.sym == SDLK_TAB &&
+         ( ( settings_current.joystick_1_output && settings_current.joystick_1_fire_5 ) ||
+           ( settings_current.joystick_gcw0_output && settings_current.joystick_gcw0_l1 ) ) ) ||
+       ( event->key.keysym.sym == SDLK_BACKSPACE &&
+         ( ( settings_current.joystick_1_output && settings_current.joystick_1_fire_6 ) ||
+           ( settings_current.joystick_gcw0_output && settings_current.joystick_gcw0_r1 ) ) ) )
+    return 0;
+
+  return 1;
+}
+
+int
+filter_combo_done( const SDL_Event *event )
+{
+  int i, filter_released_key = 0;
+
+  /* Not filter if not combo or not release key*/
+  if ( !combo_done || event->type != SDL_KEYUP )
+    return filter_released_key;
+
+  /* Search for released key and check to filter*/
+  for(i=0;i<last_combo_key;i++)
+    if (combo_keys[i] && combo_keys[i]->key.keysym.sym == event->key.keysym.sym) {
+      free(combo_keys[i]);
+      combo_keys[i] = NULL;
+      filter_released_key = 1;
+    }
+
+  /* Any combo pending */
+  for(i=0;i<last_combo_key;i++)
+    if (combo_keys[i] && filter_released_key)
+      return filter_released_key;
+
+  /* All combo keys released */
+  combo_done = 0;
+  last_combo_key = 0;
+  return filter_released_key;
+}
+
+int
+push_combo_event( Uint8* flags )
+{
+  SDLKey        combo_key = 0;
+  SDL_Event    *combo_event;
+  int       toggle_triple_buffer = 0;
+
+  /* Search valid combos */
+  switch (*flags) {
+  case 0xA1: combo_key = SDLK_F4; break;/* L1 + Select + X General opetions */
+  case 0xA2: combo_key = SDLK_F9; break;/* L1 + Select + Y Machine Select */
+  case 0xC1: combo_key = SDLK_F7; break;/* L1 + Start + X Tape Open */
+  case 0xC2: combo_key = SDLK_F8; break;/* L1 + Start + Y Tape play */
+  case 0x30: toggle_triple_buffer = 1; break;/* L1 + R1 Toggle triple buffer */
+  case 0x21: combo_key = SDLK_F3; break;/* L1 + X Open files */
+  case 0x22: combo_key = SDLK_F2; break;/* L1 + Y  Save files*/
+  case 0x11: combo_key = SDLK_F10; break;/* R1 + X Exit*/
+  case 0x12: combo_key = SDLK_F5; break;/* R1 + Y Reset */
+  default: break;
+  }
+
+  /* Push combo event */
+  if (combo_key) {
+    combo_event = malloc(sizeof(SDL_Event));
+    combo_event->type = SDL_KEYDOWN;
+    combo_event->key.type = SDL_KEYDOWN;
+    combo_event->key.state = SDL_PRESSED;
+    combo_event->key.keysym.sym = combo_key;
+    SDL_PushEvent(combo_event);
+    *flags = 0x00;
+    combo_done = 1;
+    return 1;
+  } else if (toggle_triple_buffer) {
+    settings_current.triple_buffer = !settings_current.triple_buffer;
+    combo_done = 1;
+    *flags = 0x00;
+    return 1;
+  } else
+    return 0;
+}
+
+/*
+
+ This is called for filter Events. The current use is for start combos keys
+ before the events will be passed to the ui_event function
+
+ Return values are:
+    0 will drop event
+    1 will push event
+
+ L1 or R1 start a combo if they are not mapped to any Joystick.
+ When a combo is started if any key not used in combos is pressed or released
+ then the event is pushed.
+ Auto-repeat keys in combos are droped.
+ if a combo is done then the release of keys in combo are dropped at init
+ Current keys used in combos: L1, R1, Select, Start, X, Y.
+
+ Combos currently are mapped to Fx functions used in Fuse:
+   L1 + R1          Toggle triple buffer
+   L1 + X           Open file (F3)
+   L1 + Y           Save file (F2)
+   R1 + X           Exit fuse (F10)
+   R1 + Y           Reset machine (F5)
+   L1 + Select + X  General options (F4)
+   L1 + Select + Y  Machine select (F9)
+   L1 + Start + X   Tape open (F7)
+   L1 + Start + Y   Tape play (F8)
+*/
+int
+filter_combo_events( const SDL_Event *event )
+{
+  static Uint8  flags  = 0;
+  int i, not_in_combo  = 0;
+
+  /* Filter release of combo keys */
+  if ( filter_combo_done(event) ) return 0;
+
+  if ( !is_combo_possible(event) ) return 1;
+
+  switch (event->type) {
+  case SDL_KEYDOWN:
+    switch (event->key.keysym.sym) {
+    case SDLK_ESCAPE:    /* Select */
+      if (flags) {
+        if (flags & 0x80)
+          return 0; /* Filter Repeat key */
+        else
+          flags |= 0x80;
+      } else
+        return 1;
+      break;
+
+    case SDLK_RETURN:    /* Start */
+      if (flags) {
+        if (flags & 0x40)
+          return 0; /* Filter Repeat key */
+        else
+          flags |= 0x40;
+      } else
+        return 1;
+      break;
+
+    case SDLK_TAB:        /* L1 */
+      if (flags & 0x20)
+        return 0; /* Filter Repeat key */
+      else
+        flags |= 0x20;
+      break;
+
+    case SDLK_BACKSPACE:  /* R1 */
+      if (flags & 0x10)
+        return 0; /* Filter Repeat key */
+      else
+        flags |= 0x10;
+      break;
+
+    case SDLK_SPACE:     /* X  */
+      if (flags) {
+        if (flags & 0x01)
+          return 0; /* Filter Repeat key */
+        else
+          flags |= 0x01;
+      } else
+        return 1;
+      break;
+
+    case SDLK_LSHIFT:      /* Y  */
+      if (flags) {
+        if (flags & 0x02)
+          return 0; /* Filter Repeat key */
+        else
+          flags |= 0x02;
+      } else
+        return 1;
+      break;
+
+    /* Key not in combo */
+    default:
+      not_in_combo = 1;
+      break;
+    }
+
+    break;
+
+  /* Any release key break the combo */
+  case SDL_KEYUP:
+    switch (event->key.keysym.sym) {
+    case SDLK_ESCAPE:     /* Select */
+      if (flags & 0x80)
+        flags &= ~0x80;
+      else
+        return 1;
+      break;
+
+    case SDLK_RETURN:    /* Start */
+      if (flags & 0x40)
+        flags &= ~0x40;
+      else
+        return 1;
+      break;
+
+    case SDLK_TAB:        /* L1 */
+      flags &= ~0x20;
+      break;
+
+    case SDLK_BACKSPACE:  /* R1 */
+      flags &= ~0x10;
+      break;
+
+    case SDLK_SPACE:      /* X  */
+      if (flags & 0x01)
+        flags &= ~0x01;
+      else
+        return 1;
+      break;
+
+    case SDLK_LSHIFT:    /* Y  */
+      if (flags & 0x02)
+        flags &= ~0x02;
+      else
+        return 1;
+      break;
+
+    /* Key not in combo */
+    default:
+      not_in_combo = 1;
+      break;
+    }
+
+    /* All Combo keys released, clean all saved events */
+    if (!not_in_combo && !flags) {
+      for(i=0;i<last_combo_key;i++)
+        if (combo_keys[i]) {
+          free(combo_keys[i]);
+          combo_keys[i] = NULL;
+        }
+      last_combo_key = 0;
+    }
+
+    break;
+
+  default:
+    not_in_combo = 1;
+    break;
+  }
+
+  if (!not_in_combo) {
+    /* Save actual event, excluding releases */
+    if (event->type == SDL_KEYDOWN) {
+      combo_keys[last_combo_key] = malloc( sizeof(SDL_Event) );
+      memcpy( combo_keys[last_combo_key], event, sizeof(SDL_Event) );
+      last_combo_key++;
+    }
+
+    /* Push combo event */
+    push_combo_event( &flags );
+
+    /* Drop current Event */
+    return 0;
+
+  } else
+    /* Push current Event */
+    return 1;
+}
+#endif /* GCWZERO */
diff --git a/ui/sdl/sdlui.c b/ui/sdl/sdlui.c
index ed532fb..7b8d754 100644
--- a/ui/sdl/sdlui.c
+++ b/ui/sdl/sdlui.c
@@ -40,11 +40,8 @@
 #if VKEYBOARD
 #include "ui/vkeyboard.h"
 #endif
-
 #ifdef GCWZERO
-static Uint8 *keys_state;
-int
-process_combo_keys( void );
+#include "ui/hotkeys.h"
 #endif
 
 static void
@@ -78,36 +75,12 @@
   ui_mouse_present = 1;
 
 #ifdef GCWZERO
-  keys_state = SDL_GetKeyState(NULL);
+  SDL_SetEventFilter(filter_combo_events);
 #endif
 
   return 0;
 }
 
-#ifdef GCWZERO
-int
-process_combo_keys( void )
-{
-  SDL_Event event;
-
-#ifdef VKEYBOARD
-  if ( ui_widget_level >= 0 || vkeyboard_enabled ) return 0;
-#else
-  if ( ui_widget_level >= 0 ) return 0;
-#endif
-
-  SDL_PumpEvents();
-
-  /* L1 + R1 + X: Toggle triple buffer */
-  if ( keys_state[SDLK_TAB] && keys_state[SDLK_BACKSPACE] && keys_state[SDLK_SPACE] ) {
-    settings_current.triple_buffer = !settings_current.triple_buffer;
-    return 1;
-  }
-  else
-    return 0;
-}
-#endif
-
 int 
 ui_event( void )
 {
@@ -115,9 +88,6 @@
 #if VKEYBOARD
   int vkeyboard_enabled_old = vkeyboard_enabled;
 #endif
-#ifdef GCWZERO
-  if (process_combo_keys()) return 0;
-#endif
 
   while ( SDL_PollEvent( &event ) ) {
     switch ( event.type ) {
diff --git a/ui/widget/select.c b/ui/widget/select.c
index c11cb16..7a2bf45 100644
--- a/ui/widget/select.c
+++ b/ui/widget/select.c
@@ -124,25 +124,27 @@
 #endif
 
 #ifdef GCWZERO
-  case INPUT_KEY_Home:
-  case INPUT_KEY_End: /* RetroFW */
+  case INPUT_KEY_Home:  /* Power */
+  case INPUT_KEY_End:   /* RetroFW */
     widget_end_all( WIDGET_FINISHED_CANCEL );
     return;
 #endif
 
 #ifdef GCWZERO
-  case INPUT_KEY_Alt_L:
-#endif
+  case INPUT_KEY_Alt_L: /* B */
+#else
   case INPUT_KEY_Escape:
+#endif
   case INPUT_JOYSTICK_FIRE_2:
     widget_end_widget( WIDGET_FINISHED_CANCEL );
     return;
 
 #ifdef GCWZERO
-  case INPUT_KEY_Control_L:
-#endif
+  case INPUT_KEY_Control_L: /* A */
+#else
   case INPUT_KEY_Return:
   case INPUT_KEY_KP_Enter:
+#endif
   case INPUT_JOYSTICK_FIRE_1:
     widget_end_widget( WIDGET_FINISHED_OK );
     return;
@@ -166,7 +168,7 @@
     break;
 
 #ifdef GCWZERO
-  case INPUT_KEY_Tab:
+  case INPUT_KEY_Tab: /* L1 */
 #else
   case INPUT_KEY_Home:
 #endif
@@ -177,7 +179,7 @@
     break;
 
 #ifdef GCWZERO
-  case INPUT_KEY_BackSpace:
+  case INPUT_KEY_BackSpace: /* R1 */
 #else
   case INPUT_KEY_End:
 #endif
