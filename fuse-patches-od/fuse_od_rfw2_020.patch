From 7b2eca1819a48e2ac126c4fd06188f99b8d173d4 Mon Sep 17 00:00:00 2001
From: Pedro Luis Rodríguez González <pl.rguez@gmail.com>
Date: 12 oct. 2020 21:38:49

Patch #020 for OpenDingux and RetroFW
Init v0.0.3.
Map left stick to directional pad for gcw0 keyboard mappings.
New conditional compilation define for diferenciate RetroFW.
The compilation for RetroFW now has GCWZERO & RETROFW defined.

diff --git a/Platform/VERSION b/Platform/VERSION
index 7bcd0e3..d0c9db6 100644
--- a/Platform/VERSION
+++ b/Platform/VERSION
@@ -1 +1 @@
-0.0.2
\ No newline at end of file
+0.0.3-wip
\ No newline at end of file
diff --git a/Platform/readme.txt b/Platform/readme.txt
index 84bf0c2..4f85f7c 100644
--- a/Platform/readme.txt
+++ b/Platform/readme.txt
@@ -177,6 +177,14 @@
     The last visited directory will be saved to use as initial path.
     This will be used if Fuse is loaded without file selector.
 
+  - Map left stick to DPad for GCW0 keyboard mapping:
+    -------------------------------------------------
+    Default enabled.
+
+    With this option enabled and if GCW0 keyboard mapping is enabled
+    then left stick moves are mapped to directional pad buttons
+    mapped in GCW0 keyboard mapping.
+
 Options - Media
 ---------------
 
diff --git a/configure.ac b/configure.ac
index c5eba16..e8b99d5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -332,7 +332,8 @@
   AC_MSG_RESULT($retrofw)
   if test "$retrofw" = yes; then
     if test "$sdl_available" = yes; then
-      AC_DEFINE([GCWZERO], 1, [Defined if RetroFW is in use])
+      AC_DEFINE([GCWZERO], 1, [Defined if GCW ZERO is in use])
+      AC_DEFINE([RETROFW], 1, [Defined if RetroFW is in use])
       UI=sdl
       WIDGET=widget
       use_sdl=yes
diff --git a/input.c b/input.c
index 3075de3..7abc0b9 100644
--- a/input.c
+++ b/input.c
@@ -42,11 +42,13 @@
 
 int
 input_event_gcw0( const input_event_t *event ) {
-  if (ui_widget_level == -1 && !vkeyboard_enabled ) {
+  if ( ui_widget_level == -1 && !vkeyboard_enabled ) {
     input_event_t nevent;
-    if (settings_current.joystick_1_output) {
+
+    /* GCW0 Joystick 1 */
+    if ( settings_current.joystick_1_output ) {
       nevent.types.joystick.button = 0;
-      switch (event->types.key.native_key) {
+      switch ( event->types.key.native_key ) {
       case INPUT_KEY_Up:
         nevent.types.joystick.button = INPUT_JOYSTICK_UP;
         break;
@@ -126,99 +128,151 @@
       default:
         break;
       }
-      if (nevent.types.joystick.button) {
+
+      if ( nevent.types.joystick.button ) {
         nevent.types.joystick.which = 0; /*Joystick 0*/
-        switch (event->type) {
+        switch ( event->type ) {
 
         case INPUT_EVENT_KEYPRESS:
           nevent.type = INPUT_EVENT_JOYSTICK_PRESS;
-          return do_joystick(&(nevent.types.joystick), 1);
+          return do_joystick( &(nevent.types.joystick), 1 );
 
         case INPUT_EVENT_KEYRELEASE:
           nevent.type = INPUT_EVENT_JOYSTICK_RELEASE;
-          return do_joystick(&(nevent.types.joystick), 0);
+          return do_joystick( &(nevent.types.joystick), 0 );
 
-        default: break;
+        default:
+          break;
         }
       }
-    } else if (settings_current.joystick_gcw0_output) {
+
+    /* GCW0 Keyboard */
+    } else if ( settings_current.joystick_gcw0_output ) {
+      input_event_type event_type = event->type;
       keyboard_key_name key = 0;
       nevent.types.key.spectrum_key = 0;
-      switch (event->types.key.native_key) {
-      case INPUT_KEY_Up:
-        key = settings_current.joystick_gcw0_up;
-        break;
 
-      case INPUT_KEY_Down:
-        key = settings_current.joystick_gcw0_down;
-        break;
+      /* Left stick to GCW0 Keyboard pad */
+      if ( settings_current.od_left_stick_to_gcw0_keyboard &&
+          ( event->type == INPUT_EVENT_JOYSTICK_PRESS ||
+            event->type == INPUT_EVENT_JOYSTICK_RELEASE ) &&
+           event->types.joystick.which == 0 ) {
+        switch ( event->types.joystick.button ) {
+        case INPUT_JOYSTICK_UP:
+          key = settings_current.joystick_gcw0_up;
+          break;
 
-      case INPUT_KEY_Left:
-        key = settings_current.joystick_gcw0_left;
-        break;
+        case INPUT_JOYSTICK_DOWN:
+          key = settings_current.joystick_gcw0_down;
+          break;
 
-      case INPUT_KEY_Right:
-        key = settings_current.joystick_gcw0_right;
-        break;
+        case INPUT_JOYSTICK_LEFT:
+          key = settings_current.joystick_gcw0_left;
+          break;
 
-      case INPUT_KEY_Control_L:
-        key = settings_current.joystick_gcw0_a;
-        break; /* A */
+        case INPUT_JOYSTICK_RIGHT:
+          key = settings_current.joystick_gcw0_right;
+          break;
 
-      case INPUT_KEY_Alt_L:
-        key = settings_current.joystick_gcw0_b;
-        break; /* B */
+        default:
+          break;
+        }
 
-      case INPUT_KEY_space:
-        key = settings_current.joystick_gcw0_x;
-        break; /* X */
+        switch ( event->type ) {
+        case INPUT_EVENT_JOYSTICK_PRESS:
+          event_type = INPUT_EVENT_KEYPRESS;
+          break;
 
-      case INPUT_KEY_Shift_L:
-        key = settings_current.joystick_gcw0_y;
-        break; /* Y */
+        case INPUT_EVENT_JOYSTICK_RELEASE:
+          event_type = INPUT_EVENT_KEYRELEASE;
+          break;
 
-      case INPUT_KEY_Tab:
-        key = settings_current.joystick_gcw0_l1;
-        break; /* L1 */
+        default:
+          break;
+        }
+      } else {
+        switch ( event->types.key.native_key ) {
+        case INPUT_KEY_Up:
+          key = settings_current.joystick_gcw0_up;
+          break;
 
-      case INPUT_KEY_BackSpace:
-        key = settings_current.joystick_gcw0_r1;
-        break; /* R1 */
+        case INPUT_KEY_Down:
+          key = settings_current.joystick_gcw0_down;
+          break;
 
-      case INPUT_KEY_Page_Up:
-        key = settings_current.joystick_gcw0_l2;
-        break; /* L2 */
+        case INPUT_KEY_Left:
+          key = settings_current.joystick_gcw0_left;
+          break;
 
-      case INPUT_KEY_Page_Down:
-        key = settings_current.joystick_gcw0_r2;
-        break; /* R2 */
+        case INPUT_KEY_Right:
+          key = settings_current.joystick_gcw0_right;
+          break;
 
-      case INPUT_KEY_Return:
-        key = settings_current.joystick_gcw0_start;
-        break; /* Start */
+        case INPUT_KEY_Control_L:
+          key = settings_current.joystick_gcw0_a;
+          break; /* A */
 
-      case INPUT_KEY_Escape:
-        key = settings_current.joystick_gcw0_select;
-        break; /* Select */
+        case INPUT_KEY_Alt_L:
+          key = settings_current.joystick_gcw0_b;
+          break; /* B */
 
-      case INPUT_KEY_slash: /* Translated unicode key */
-        key = settings_current.joystick_gcw0_l3;
-        break; /* L3 */
+        case INPUT_KEY_space:
+          key = settings_current.joystick_gcw0_x;
+          break; /* X */
 
-      case INPUT_KEY_period: /* Translated unicode key */
-        key = settings_current.joystick_gcw0_r3;
-        break; /* R3 */
+        case INPUT_KEY_Shift_L:
+          key = settings_current.joystick_gcw0_y;
+          break; /* Y */
 
-      default:
-        break;
+        case INPUT_KEY_Tab:
+          key = settings_current.joystick_gcw0_l1;
+          break; /* L1 */
+
+        case INPUT_KEY_BackSpace:
+          key = settings_current.joystick_gcw0_r1;
+          break; /* R1 */
+
+        case INPUT_KEY_Page_Up:
+          key = settings_current.joystick_gcw0_l2;
+          break; /* L2 */
+
+        case INPUT_KEY_Page_Down:
+          key = settings_current.joystick_gcw0_r2;
+          break; /* R2 */
+
+        case INPUT_KEY_Return:
+          key = settings_current.joystick_gcw0_start;
+          break; /* Start */
+
+        case INPUT_KEY_Escape:
+          key = settings_current.joystick_gcw0_select;
+          break; /* Select */
+
+        case INPUT_KEY_slash: /* Translated unicode key */
+          key = settings_current.joystick_gcw0_l3;
+          break; /* L3 */
+
+        case INPUT_KEY_period: /* Translated unicode key */
+          key = settings_current.joystick_gcw0_r3;
+          break; /* R3 */
+
+        default:
+          break;
+        }
       }
-      if (key) {
-        switch (event->type) {
-        case INPUT_EVENT_KEYPRESS: keyboard_press(key);
+
+      if ( key ) {
+        switch ( event_type ) {
+        case INPUT_EVENT_KEYPRESS:
+          keyboard_press( key );
           return 0;
-        case INPUT_EVENT_KEYRELEASE: keyboard_release(key);
+
+        case INPUT_EVENT_KEYRELEASE:
+          keyboard_release( key );
           return 0;
-        default: break;
+
+        default:
+          break;
         }
       }
     }
diff --git a/settings.dat b/settings.dat
index a2ce33b..17a531f 100644
--- a/settings.dat
+++ b/settings.dat
@@ -320,6 +320,7 @@
 od_triple_buffer, boolean, 0
 od_save_last_directory, boolean, 0
 od_last_directory, string, NULL
+od_left_stick_to_gcw0_keyboard, boolean, 1
 
 od_auto_load_with_custom_roms, boolean, 0
 
diff --git a/ui/options.dat b/ui/options.dat
index 6f876e8..304678a 100644
--- a/ui/options.dat
+++ b/ui/options.dat
@@ -35,6 +35,7 @@
 Checkbox, Show hi(d)den files, od_hidden_files, INPUT_KEY_d
 Checkbox, Hot(k)ey combos, od_hotkey_combos, INPUT_KEY_k
 Checkbox, Sa(v)e last visited directory, od_save_last_directory, INPUT_KEY_v
+Checkbox, Map (l)eft stick to DPad for GCW0 keyboard mapping, od_left_stick_to_gcw0_keyboard, INPUT_KEY_l
 #endif
 
 media
@@ -163,4 +164,4 @@
 Checkbox, No(t) detached defaults, control_mapping_not_detached_defaults, INPUT_KEY_T
 Checkbox, No cut/transfor(m) filenames, control_mapping_no_transform_filename, INPUT_KEY_M
 Checkbox, Enable (K)empston Joystick if needed, control_mapping_enable_kempston_joy, INPUT_KEY_K
-#endif
\ No newline at end of file
+#endif
diff --git a/ui/sdl/sdldisplay.c b/ui/sdl/sdldisplay.c
index bd1b836..e9a54d4 100644
--- a/ui/sdl/sdldisplay.c
+++ b/ui/sdl/sdldisplay.c
@@ -272,8 +272,10 @@
 void
 uidisplay_od_init( SDL_Rect **modes )
 {
+#ifdef RETROFW
   char line[100];
   char* ptok;
+#endif
 
 /* On OpenDingux/RetroFW fix Full Screen */
   settings_current.full_screen = 1;
@@ -324,33 +326,31 @@
  *    VERSION_ID=2014.08
  *    PRETTY_NAME="Buildroot 2014.08"
  */
-  FILE* allow_downscaling = fopen( "/sys/devices/platform/jz-lcd.0/allow_downscaling", "r" );
-  if ( !allow_downscaling ) {
-    /* We are on RetroFW */
-    FILE* os_release = fopen( "/etc/os-release", "r" );
-    if ( os_release ) {
-      while ( fgets(line, sizeof( line ), os_release ) != NULL ) {
-        ptok = strtok( line, "=" );
-        if ( strcmp( ptok, "NAME" ) == 0 ) {
-          ptok = strtok( NULL, "=" );
-          /* And we are on RetroFW 1.X */
-          if ( strcmp( ptok, "Buildroot\n" ) == 0) {
-            settings_current.sdl_fullscreen_mode = utils_safe_strdup( "320x240" );
-            sdldisplay_od_system_type = RETROFW_1;
-          } else {
-            sdldisplay_od_system_type = RETROFW_2;
-          }
-          break;
-        }
-      }
-      fclose( os_release );
-    }
 
-  /* We are on OpenDingux */
-  } else {
-    fclose( allow_downscaling );
-    sdldisplay_od_system_type = OPENDINGUX;
+#ifdef RETROFW
+  /* We are on RetroFW */
+  FILE* os_release = fopen( "/etc/os-release", "r" );
+  if ( os_release ) {
+    while ( fgets(line, sizeof( line ), os_release ) != NULL ) {
+      ptok = strtok( line, "=" );
+      if ( strcmp( ptok, "NAME" ) == 0 ) {
+        ptok = strtok( NULL, "=" );
+        /* And we are on RetroFW 1.X */
+        if ( strcmp( ptok, "Buildroot\n" ) == 0) {
+          settings_current.sdl_fullscreen_mode = utils_safe_strdup( "320x240" );
+          sdldisplay_od_system_type = RETROFW_1;
+        } else {
+          sdldisplay_od_system_type = RETROFW_2;
+        }
+        break;
+      }
+    }
+    fclose( os_release );
   }
+#else
+/* We are on OpenDingux */
+  sdldisplay_od_system_type = OPENDINGUX;
+#endif
 }
 #endif
 
@@ -580,10 +580,11 @@
 #ifdef GCWZERO
   Uint32 flags;
   if (settings_current.od_triple_buffer) {
-    if ( sdldisplay_od_system_type == OPENDINGUX )
-      sdldisplay_flips_triple_buffer = 0;
-    else
-      sdldisplay_flips_triple_buffer = 1;
+#ifdef RETROFW
+    sdldisplay_flips_triple_buffer = 1;
+#else
+    sdldisplay_flips_triple_buffer = 0;
+#endif
     flags = settings_current.full_screen ? (SDL_FULLSCREEN | SDL_HWSURFACE | SDL_TRIPLEBUF)
     : (SDL_HWSURFACE | SDL_TRIPLEBUF);
   } else {
